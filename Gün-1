whoami --> kimim ben
hostname

-pwd -->printworking
Bulundugumuz dizini yazdirir.

-ls --->list
Dizindeki dosyalari yazdirir.

-ls -l --->long list
Bilgi vererek listeler.

-ls -a ---->Full list
Gizli dosyalarıda listeler

-setxkbmap tr 
klavyeyi türkçe klavye yapar.

-touch (BelgeAdı).(BelgeTürü)---> touch myTextFile.txt
Yeni bir dosya oluşturur.

-cat (BelgeAdı).(BelgeTürü) ---> cat myTextFile.txt
Dosyanın içeriğini görüntülemek için kullanılır.

-echo "cheese" > mtTextFile.txt
//
1-echo "Cheese": Terminalde "Cheese" metnini ekrana yazdırır.
2-'>': Bu sembol, komutun çıktısını bir dosyaya yönlendirmek için kullanılır.
3-myTEXTfile: Yönlendirilen dosyanın adı. Eğer bu dosya yoksa, oluşturulur; eğer varsa, varolan içeriği silip yeni içeriği yazar.
4- '>>' yaparsan içeriğe dokunmadan sonuna ekler.
//
-rm ---> remove
Silme işlemi.(dosyaları veya dizinleri silemez)
-rmdir --> klasör silmenize olanak tanır.

-mv --->movement
//
1-Dosya Taşıma: mv komutunu kullanarak bir dosyayı başka bir dizine taşıyabilirsiniz.
-mv dosya1.txt yeni_dizin/

2-Dosya Yeniden Adlandırma: mv komutunu kullanarak aynı zamanda bir dosyanın adını da değiştirebilirsiniz.
-mv eski_ad.txt yeni_ad.txt

3-Kuvvetli Taşıma: Eğer hedef dizinde aynı ada sahip bir dosya varsa, -f seçeneği ile mv komutu kullanılarak bu dosya ezilebilir
//

-cp ---> copy
-cp ast.txt ast1.txt



Linux kabuğumuzu değiştirmek istersek.
-which bash
Diyerek bash kabuğumuzun yerini öğreniyoruz.
-chsh -s  (bash kabuğunun bulunduğu dizin)
Kaydet çık yapıp tekrar girince değiştini görmek için.
-echo SHELL
Diyoruz.
-cat /etc/shells
Diyerek ise geçiş yapabileceğimiz kabykları görebiliriz.


Bu komut sayesinde dosyayı hangi dizinde oluşturacağımı yönetebiliyorum.
-touch ~/test.txt ~/Desktop/test.txt 

Herhangi bir dosyayı bulmak için 'find' aracını kullanabiliriz.
-find /home/ -name test.txt
/home/kali/Desktop/test.txt
/home/kali/test.txt

Veya 'locate' aracını
-locate 'file_name'


Bukomut ile bir betik dosyası oluşturabilir ve içine veri girişi yapmamız için beklemesini sağlayabiliriz.
-cat > betik.sh
'cat >'  bu kullanım veri girişi yapmama olanak tanır.
sh uzantısının anlamı ise kabuk betiği olduğunu belirtmek (shell script).


Bu komut ile PATH  yolunun sorguladığı dizinleri görebilirsiniz.
-echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games
Ve eğer betik dosyamı bu dizinlerden herhangi birine taşırsam sadece  betik.sh    yazarak çalıştırabilirim.

Burda da tıpkı normal kodlama dillerinde olduğu gibi değişkenler var 
Ad="Ahmet"
Dikkat etmeniz gereken şey '=' operatörünün sağında ve solunda boşluk olmaması lazım.

echo $Ad   diyerek bu aracı çalıştırabiliriz $ sembolunu gören echo aracı onun bir değişke olduğunu anlıyor.

-bash  yazarak yeni bir kabuğa geçebilir  ve exit yazarak eski kabuğa dönebilirsiniz.
-export ad    diyerek değişkeninizi global hale getirmesseniz diğer kabuklarda kullanmassınz.


Ama bu değişkenler farklı bir komut satırı açarsak orada çalışmayacaktır bunun sebebi aynı komut satırının farklı kabuklarında miras bırakma olayı varken farklı  komut satırlarında miras bırakma olayı gerçekleşemiyor.
Bunu çözmenin yolu bu değişkeni konfigürasyon dosyalarının içinde tanımlamak.

Bu dosyalar 2 ye ayrılır

Sistem Geneli İçin Yapılandırma                                             
-----------------------------------------------------------------------------------------------------
Linux çok kullanıcılı bir işletim sistemi olduğu için
tüm kullanıcılar üzerinde geçerli olabilecek toplu yapılandırma kuralları tanımlayabilmek adına
sistem genelinde kullanılan yapılandırma dosyalarında düzenlemeler yapabiliriz.

/etc/profile
/etc/bashrc
/etc/bash.bashrc

 Kullanıcı Bazlı Yapılandırma
------------------------------------------------------------------------------------------------------
Değişikliklerin tüm kullanıcıları değil de özel olarak tek bir kullanıcıyı etkilemesini istersek
kullanıcının kendi ev dizininde bulunan yapılandırma dosyalarında düzenlemeler yapabiliriz.

~/.bash_profile
~/.bashrc
~/.bash_login
~/.profile


.bashrc  dosyası yeni bir terminal penceresi açıldığında otomatik olarak çalışan bir yapılandırma dosyasıdır.
Eğer PATH  yoluna yeni bir yol dizini eklemek istersek.

1-mkdir ~/Desktop/yeni-dizin
2-sudo nano /etc/bash.bashrc
3-export PATH=”$PATH:/home/taylan/Desktop/yeni-dizin/”
4-source /etc/bash.bashrc
5-echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games:/home/taylan/Desktop/yeni-dizin

6-cat > test.sh
7-echo "bu bir test programıdır"                                                                   
8-chmod +x test.sh                                                                               
9-mv test.sh ~/Desktop/yeni-dizin/
10-test.sh

Biraz karmaşık gözüküyor olabilir ama cidden çok kolay
1-İlk olarak yeni bir dizin oluşturuyoruz adını istediğiniz şekilde belirleyebilirsiniz.
2-nano aracını çalıştırarak terminalin yapılandırma dosyası üzerinde değişiklik yapmak istiyoruz tabiki belli bir yetki seviyesi istediği için basşına sudo yazıyoruz ki şifremiz ile erişim sağlayalım
3-En alta iniyoruz ve PATH  değişkenini global değişken olarak tanımlıyoruz ki terminal açıldığında her kabukta işlev göstersin, sonra da PATH global değişkenine hem önceki adresleri atıyoruz hemde yeni bizim oluşturduğumuz adresi atıyoruz.
4-Source diyerek yapılandırma dosyasını seçerek değişikliklerin kaydedilip yürütülmesini sağlıyoruz isterseniz kapatıp açadabilirsiniz sistemi.
5-Değişikliklerin geçerli olduğu görmek  için PATH yolllarını gözden geçiriyoruz , işe yaradığını sizde görebilirsiniz.
6-test.sh adında bir betik dosyası oluşturuyoruz  ve  "cat >"   kombinasyonu ile içerisine veri girişi yapıcağımızı söylüyoruz.
7-echo ile verimizi giriyoruz.
8-chmod +x ile yetkilendiriyoruz betik dosyamızı ki  PATH yoluna taşıyabilelim.
9-mv  aracı ile test  betiğimizi yeni dizinimize taşımış olduk.
10-çalıştırdık ve çıktıyı gördük  çalışıyor.



Dosyaların başına   "."   koyarsak gizli dosya sayılıyorlar.


Linux Kısayolları
---------------------
İmleç kısayolları/
ctrl + A --> imleci satır başına getirir.
ctrl + E --> imleci satır sonuna getirir.
ctrl + B --> imleci sola hareket ettirir.
ctrl + F --> imleci sağa hareket ettirir.
alt + F --> bir kelime ileri atlamak için kullanılır.
alt + B --> bir kelime geri atlamak için kullanılır.

Düzenleme kısayolları/
alt + Backspace --> imleçten bir önceki kelimeyi silmek için kullanılır.
alt + D --> imleçten sonraki kelimeleri silmek için kullanılır.
ctrl + _ --> silinen karakter veya kelimeleri geri getirmek için kullanılır.
alt + T --> imlecin sağındaki ve solundaki kelimelerin yerlerini değiştirmek için kullanılır.
ctrl + W --> kes
ctrl + Y --> yapıştır
ctrl + U --> imlecin arkasında kalan tüm metni kesmek için kullanılır.
ctrl + L --> komut satırını temizler ve yeni bir tanesini getirir.
tab --> otomatik tamamlama için kullanılır.
ctrl + R --> geçmiş listesinden bir arama başlatır.
ctrl + C --> bir şeyleri sonlandırmak için kullanılır.


Bu araç yardımıyla geçmiş girdilerimizi görebiliriz.
-history
ve eğer eskilerden birini çağırmak istersek.
 !SıraNo
şeklinde istediğimiz sıradaki girdiyi tekrar çağırabiliriz.

2 ünlem yazarak gönderirsek ise son yazdığımız komutu  tekrar çalıştırırız.
-!!



Alias == Takma isim
---------------------
alias bas="echo bunu epey uzun bir komut olarak varsayın"
Bunu sistem dosyalarının içine yerleştirirsek tüm terminal ve kabuklarda geçerli hale getirebiliriz.
nano aracı ile yapmak çok basit.

-sudo nano ~/.bashrc
en alta inip
-alias bas="echo bunu epey uzun bir komut olarak varsayın"
bunu ekliyoruz kaydedip çıkıyoruz

Dosyayı baştan okutuyoruz.
-source ~/.bashrc

-alias 
Yazarak mevcut olan takma isimleri listeletebiliriz.


Unalias == Takma isimleri kaldırmak
------------------------------------
-unalias bas
Bu şekilde bas takma ismini kaldırabilirim mesela ama sadece kullandığım kabukta geçerli olur
Sistemden silmek istiyorsam konfigürasyon dosyalarında oynamam gerekir.


-MAN
Man komutu kullanıcağımız diğer araçlar hakkında bilgi sayfası açar.
-man <araç ismi>  
şeklinde kullanılır
İşte orada karşılaşabileceğimiz bazı başlıklar.

NAME: İlgili aracın isminin ve işlevinin kısaca açıkladığı bölümdür.
SYNOPSIS: Aracın nasıl kullanılacağına dair kısa açıklamalar ve örnek komutları içerir. Bu bölümde genellikle sık kullanılan seçenek ve parametrelerinin nasıl girilmesi gerektiği şablon olarak gösterilir.
DESCRIPTION: İlgili aracın yerine getirdiği görev hakkında nispeten daha uzun ve detaylı şekilde açıklama içeren bölüm yani esas açıklama bölümü.
OPTIONS: Aracın sahip olduğu seçenekler ve bu seçeneklerin kullanımı hakkında bilgi sunan bölümdür. Buradaki bilgiler çoğunlukla ilgili aracın —help seçeneği ile sunulan seçenek bilgileridir.
EXAMPLES: İlgili aracın kullanıma dair örneklerin yer aldığı bölümdür. Bu bölümde genellikle çok sık tercih edilen, ya da aracın kabiliyetlerini kavramamızı sağlayacak örneklere sıklıkla yer veriliyor.
AUTHOR: Yazarların isimleri ve iletişim bilgilerinin yer aldığı bölümdür.
REPORTING BUGS: Hata veya eksikleri bildirebileceğiniz iletişim adresleri hakkında bilgi sunuyor.
COPYRIGHT VE SEE ALSO: Son bölümde ise, telif hakları ve daha fazla bilgiyi nereden alabileceğimiz gibi ekstra detayları belirten açıklama bulunuyor.


->man -k "anahtar_kelimeler"
Aradığım özelliğe sahip araçları listeletebilirim.
---------------------------------------------------------------------------
man -k "change file"
chattr (1)           - change file attributes on a Linux file system
chcon (1)            - change file security context
chmod (1)            - change file mode bits
---------------------------------------------------------------------------
->apropos komutu da man -k    komutu ile aynı işi yapar.

->info <araç_adı>
Bu da yine bilgi verir ama "man" kadar popüler değildir.


Eklediğimiz araçlarla birlikte dökümantasyon dosyalarını da edinmiş oluruz.
İşte o dökümantasyon dosyalarının bulunduğu dizin.
 /usr/share/doc 



Dizinlerde gezinmek \
    /bin (Binaries): Bu dizin, tüm kullanıcıların erişebileceği temel işlevleri gerçekleştirmek için kullanılan programları içeriyor.
    /sbin (System Binaries): Bu dizin, sistem yöneticileri tarafından kullanılan ve sistem yönetimi ve bakımıyla ilgili önemli programları içeriyor.

/boot
Önyükleme yani “boot” aşaması için gereken dosyaları barındıran dizindir. Ne yaptığınızdan emin olmadığınız sürece bu dizini kurcalamanız gerekmeyecektir.

/dev
/dev dizini “devices” yani “aygıtlar” kelimesinin kısaltmasından geliyor. Bu dizin, sisteme bağlı olan donanım aygıtlarını temsil eden aygıt dosyalarını içeriyor. Linux üzerinde her şey bir dosya gibi ele alındığı için sisteme bağlı olan aygıtları temsil eden dosyalar da bu dizinde bulunuyor.

/etc
/etc dizini, sistemdeki konfigürasyon dosyalarının tutulduğu dizindir. Genellikle istisnalar hariç Linux sisteminde bir hizmetleri yapılandırmamız veya diğer çeşitli temel ayarları değiştirmemiz gerekiyorsa, bakacağımız ilk yer burasıdır.

/home
Daha önce de bahsetmiş olduğumuz gibi home dizini altında her bir kullanıcının ismiyle oluşturulmuş klasörler vardır. Bu klasörler ilgili kullanıcının ev dizini olarak geçer. Her bir kullanıcının kendi kullanıcı hesabına özgü olan çeşitli konfigürasyon dosyaları, belgeleri resimleri ve diğer çeşitli dosyaları bu dizinde bulunur. Örneğin ben “taylan” isimli kullanıcı hesabını yönettiğim için benim kullanıcı hesabımın ev dizini /home/taylan adresinde yer alıyor. Dizin içeriğine göz atmak için ls /home/taylan/ komutuyla listeleyebiliriz.

/usr
/usr dizini aslında neredeyse tüm komut dosyalarının, kütüphane dosyalarının ve çeşitli dokümantasyonlarla birlikte sistemin normal işleyişi için gerekli olan dosyaların bulunduğu dizindir.

/tmp
tmp dizini “temporary” yani “geçici” ifadesinden kısaltmasından geliyor. Geçici olarak tutulması gereken dosya ve klasörler için kullanılan bir dizin adresidir. Hem kullanıcılar hem de programlar, geçici içerikler için bu dizini kullanabiliyor. Bu dosyalar geçici olarak RAM üzerinde tutulduğu için bu dizin altındaki veriler sistem yeniden başlatıldığında silinmiş oluyor.

/media ve /mnt
media ve mnt dizinlerinin her ikisi de medya aygıtlarının bağlanması için kullanılıyor. Aralarındaki fark media dizini “USB bellek, harici disk, CD/DVD sürücüsü vb.” gibi harici çıkarılabilir medya aygıtlarını bağlamak için kullanılırken, mnt dizini ise genellikle geçici olarak disk bölümlerini bağlamak için kullanılan bir dizindir.

/proc
proc dizini önyükleme sırasında oluşturulduğu ve kapatma sırasında kaldırıldığı için her zaman mevcut gibi görünse de aslında sisteminiz ve o anda çalışan işlemleri hakkında birçok alakalı bilgi içeren sanal bir dosya sistemidir. Örneğin yeni bir işlem başlattığınızda bu dizin altında bu işlemle ilişkili yeni bir sanal dizin oluşturulacaktır. Dizinin “proc” ismi de “process” yani “işlem” ifadesinin kısaltmasından geliyor zaten.

/root
root dizini root kullanıcısının ev dizinidir. Tıpkı bizim ev dizinlerimizin home dizini altında kullanıcı adımızla barındırılıyor olması gibi root kullanıcısının ev dizini de ana dizinde “root” isimli klasörde barındırılıyor.

/var
var dizininin ismi “variable” yani “değişken” ifadesinin kısaltmasından geliyor. Bu şekilde isimlendirilmesinin nedeni, sürekli yenileri eklenen ve değişen dosyaların burada barındırılıyor olmasıdır. Log dosyaları, çeşitli veritabanı dosyaları ve benzeri pek çok veri bu dizin altında tutuluyor.

/sys
/sys dizini, çeşitli sistem bileşenleri ve sürücüleri hakkında bilgiler içeren dizindir.

/run
Sistem başlangıcından itibaren, sistem kaynaklarının nasıl kullanıldığına dair çeşitli bilgileri tutan bir dizindir. Bu veriler, sistemin o anda çalışan işlemlerinin ihtiyaçlarını karşılamak için gerekli olan türde geçici verilerdir. Örneğin geçici verileri tutmak veya araçlar arasında veri paylaşımını ve yönetimini mümkün kılmak için kullanılan çeşitli bilgiler bu dizin altında tutulur. İsminde de olduğu gibi “running” yani “çalışma” halindeki bilgiler bulunduğundan, sistem her yeniden başlatıldığında bu veriler de temizlenir.




